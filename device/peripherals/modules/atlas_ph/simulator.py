# Import python types
from typing import Any, Dict

# Import device utilities 
from device.utilities.bitwise import byte_str

# Import simulator base clase
from device.comms.i2c2.peripheral_simulator import PeripheralSimulator


class AtlasPHSimulator(PeripheralSimulator): # type: ignore
    """Simulates communication with atlas pH sensor."""

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """ Initializes simulator."""

        # Initialize parent class
        super().__init__(*args, **kwargs)

        self.registers: Dict = {}

        # Initialize write and response bytes
        PH_WRITE_BYTES = bytes([0x52, 0x00])
        PH_RESPONSE_BYTES = bytes([0x01, 0x34, 0x2E, 0x30, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        SET_TEMP_26_WRITE_BYTES = bytes([0x54, 0x2C, 0x32, 0x36, 0x2E, 0x30, 0x00])
        SET_TEMP_26_RESPONSE_BYTES = bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        CALIBRATE_LOW_4_WRITE_BYTES = bytes([0x43, 0x61, 0x6C, 0x2C, 0x6C, 0x6F, 0x77, 0x2C, 0x34, 0x2E, 0x30, 0x00])
        CALIBRATE_LOW_4_RESPONSE_BYTES = bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        CALIBRATE_MID_7_WRITE_BYTES = bytes([0x43, 0x61, 0x6C, 0x2C, 0x6D, 0x69, 0x64, 0x2C, 0x37, 0x2E, 0x30, 0x00])
        CALIBRATE_MID_7_RESPONSE_BYTES = bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        CALIBRATE_HIGH_10_WRITE_BYTES = bytes([0x43, 0x61, 0x6C, 0x2C, 0x68, 0x69, 0x67, 0x68, 0x2C, 0x31, 0x30, 0x2E, 0x30, 0x00])
        CALIBRATE_HIGH_10_RESPONSE_BYTES = bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        CLEAR_CALIBRATION_WRITE_BYTES = bytes([0x43, 0x61, 0x6C, 0x2C, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x00])
        CLEAR_CALIBRATION_RESPONSE_BYTES = bytes([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        self.writes = {
            byte_str(PH_WRITE_BYTES): PH_RESPONSE_BYTES,
            byte_str(SET_TEMP_26_WRITE_BYTES): SET_TEMP_26_RESPONSE_BYTES,
            byte_str(CALIBRATE_LOW_4_WRITE_BYTES): CALIBRATE_LOW_4_RESPONSE_BYTES,
            byte_str(CALIBRATE_MID_7_WRITE_BYTES): CALIBRATE_MID_7_RESPONSE_BYTES,
            byte_str(CALIBRATE_HIGH_10_WRITE_BYTES): CALIBRATE_HIGH_10_RESPONSE_BYTES,
            byte_str(CLEAR_CALIBRATION_WRITE_BYTES): CLEAR_CALIBRATION_RESPONSE_BYTES,
        }
