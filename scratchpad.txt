       # def update_recipe_state(self, name=None, phase=None, cycle=None, 
    #     env_name=None, env_state=None, last_update_min=None, 
    #     start_timestamp_min=None, recipe=None):
    #     """ Safely update recipe state with provided parameters. """

    #     with threading.Lock():
    #         if recipe is not None:
    #             self.state.recipe["recipe"] = recipe
    #         if name is not None:
    #             self.state.recipe["name"] = name
    #         if phase is not None:
    #             self.state.recipe["phase"] = phase
    #         if cycle is not None:
    #             self.state.recipe["cycle"] = cycle
    #         if env_name is not None:
    #             self.state.recipe["environment_name"] = env_name
    #         if env_state is not None:
    #             self.state.recipe["environment_state"] = env_state
    #             for variable in env_state:
    #                 self.set_desired_sensor_values(env_state)


    # def load_stored_recipe_state(self):
    #     """ Load recipe state stored in database. """
    #     dev = DeviceModel.objects.filter(pk=1).first()
    #     with threading.Lock():
    #         self.sys.recipe_state = json.loads(dev.recipe_state)

,
        "light_panel_taurus_1": {
            "name": "light_panel_taurus_1",
            "verbose_name": "Light Panel",
            "module": "actuator.light_panel_taurus", 
            "class": "LightPanelTaurus", 
            "comms": {
                "type": "i2c",
                "bus": "2", 
                "mux": "7", 
                "channel": "6", 
                "address": "0x3c"
            },
            "variables": {
                "spectrum": {
                    "name": "light_spectrum_taurus"
                },
                "intensity": {
                    "name": "light_intensity_par"
                }
            },
            "options": {
                "pseudo_sensor_enabled": true
            }
        }
    }



if not DeviceModel.objects.filter(pk=1).exists():
            DeviceModel.objects.create(
                id=1,
                configuration_json = json.dumps(self.config),
                recipe_json = json.dumps(self.sys.recipe_dict),
                system_state = json.dumps(self.sys.system_state),
                recipe_state = json.dumps(self.sys.recipe_state),
                peripheral_state = json.dumps(self.sys.peripheral_state),
                controller_state = json.dumps(self.sys.controller_state),
                environment_state = json.dumps(environment_state),
                log_summary = self.log_summary
            )
        else:
            DeviceModel.objects.filter(pk=1).update(
                configuration_json = json.dumps(self.config),
                recipe_json = json.dumps(self.sys.recipe_dict),
                system_state = json.dumps(self.sys.system_state),
                recipe_state = json.dumps(self.sys.recipe_state),
                peripheral_state = json.dumps(self.sys.peripheral_state),
                controller_state = json.dumps(self.sys.controller_state),
                environment_state = json.dumps(environment_state),
                log_summary = self.log_summary
            )





    # def timestamp_minutes(self):
    #     """ Get timestamp in minutes. """
    #     return int(time.time() / 60

    # self.timestamp_minutes()
# 

# 



                    # # Write by-the-minute environment states to database
                    # for minute in range(duration_minutes):
                    #     minute_counter += 1
                    #     ParsedRecipe.objects.create(
                    #         minute = minute_counter,
                    #         phase = phase_name,
                    #         cycle = cycle_name,
                    #         environment_name = environment_name,
                    #         environment_state = environment_state
                    #     )


       "format": {
        "type": "phased-vector",
        "version": "1.0"
    },
    "seeds": {
        "names": ["Basil", "Sweet Basil"],
        "links": ["http://www.edenbrothers.com/store/sweet_basil_seeds.html"]
    },
    "plant_type": ["Basil", "Warm"],
    "optimization": ["Demo"],
    "author": "Jake Rye",
    "date_created": "2018-03-23",



        # _temperature = None
    # _humidity = None


    # @property
    # def temperature(self):
    #     """ Gets temperature value. """
    #     return self._temperature


    # @temperature.setter
    # def temperature(self, value):
    #     """ Safely updates temperature in environment object each time
    #         it is changed. """
    #     self._temperature = value
    #     with threading.Lock():
    #         self.env.report_sensor_value(self.name, self.temperature_name, 
    #                                     self._temperature)

    # @property
    # def humidity(self):
    #     """ Gets humidity value. """
    #     return self._humidity


    # @humidity.setter
    # def humidity(self, value):
    #     """ Safely updates humidity in environment object each time 
    #         it is changed. """
    #     self._humidity = value
    #     with threading.Lock():
    #         self.env.report_sensor_value(self.name, self.humidity_name, 
    #                                     self._humidity)


    # def initialize_peripheral(self):
    #     """ Initializes peripheral. """
    #     try:
    #         self.logger.debug("Sensor initialized")
    #     except:
    #         self.logger.exception("Unable to initialize")
    #         self.state = self.states.ERROR
    #         self.error = self.errors.UNKNOWN


    # def update_peripheral(self):
    #     """ Updates peripheral. """
    #     self.get_temperature()
    #     self.get_humidity()


    # def reset_peripheral(self):
    #     """ Reset peripheral. """
    #     self.temperature = None
    #     self.humidity = None


   # Update instantaneous environment dictionary 
        # Average values from all peripheral devices with identical variables
        inst_value = 0
        num_peripherals = 0
        for peripheral in self._raw[variable]:
            inst_value += self._raw[variable][peripheral]
            num_peripherals += 1
        inst_value /= num_peripherals
        self._inst[variable] = inst_value
        self.logger.debug("Set instantaneous {}: {}".format(variable, inst_value))

        # Update average environment dictionary
        # Average value for each peripheral
        if peripheral not in self._avg[variable]:
            avg_value = value
            samples = 1
        else:
            stored_avg = self._avg[variable][peripheral]["value"]
            stored_samples = self._avg[variable][peripheral]["samples"]
            samples = stored_samples + 1
            avg_value = (stored_avg*stored_samples + value) / samples
        self._avg[variable][peripheral] = {"value": avg_value, "samples": samples}
        self.logger.debug("Set average {} ({}): {}, samples: {}".format(variable, peripheral, avg_value, samples))



, 
	"light_panel_taurus_1": {
		"class_file": "light_panel_taurus", 
		"class_name": "LightPanelTaurus", 
		"class_config": { 
			"bus": "2", 
			"mux": "7", 
			"channel": "6", 
			"address": "0x3c"
		}
	}


	args=(env, sys,)

				# Update peripheral state in system object
			# if self.prev_state != self.state:
			# 	sys.peripheral[self.name]["prev_state"]

			# 	self.prev_state = self.state




   @property
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    @property
    def prev_state(self):
        return self._prev_state

    @prev_state.setter
    def prev_state(self, value):
        self._prev_state = value


        # Try to import models shared with api
try:
	from core.models import *
except:
	logger.warning("Unable to import models. Make sure api is running.")




	# Create system object
	# from system import System
	# sys = System()

	# Start state machine
	while True:
		
		# Configuration state
		if sys.state == sys.CONFIG:
			
			# Load in configuration file
			logger.info("Loading in configuration file")
			config = json.load(open('config.json'))

			# TODO: Validate config file

			# Transition to setup state
			sys.state = sys.SETUP


		# Setup state
		elif sys.state == sys.SETUP

			# TODO: Initailize stored system state

			# Create environment object
			from environment import Environment
			env = Environment(config)







	# Create peripheral objects from config
	logger.info("Creating peripheral objects")
	peripheral = {}
	for peripheral_name in config:
		# Extract module parameters from config
		module_name = "peripherals." + config[peripheral_name]["class_file"]
		class_name = config[peripheral_name]["class_name"]

		# Import peripheral library
		module_instance= __import__(module_name, fromlist=[class_name])
		class_instance = getattr(module_instance, class_name)

		# Create peripheral object instances
		peripheral[peripheral_name] = class_instance(config=config[peripheral_name], name=peripheral_name, env=env, sys=sys)

	# Run peripheral objects
	logger.info("Running peripheral object threads")
	for peripheral_name in peripheral:
		peripheral[peripheral_name].run()


	while True:
		env.log(inst=True)
		sys.log()
		time.sleep(10)


